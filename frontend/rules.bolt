type UserInfo {
  name: String,
  email: String,
  uid: String
}

type UserMetaInfo {
  code: String,
  verified: Boolean
}

type CodeVerifier {
  code: String
}

type Comment {
  value: String,
  author: UserInfo,
  idea: String
}

type IdeaData {
  title: String,
  summary: String
}

type IdeaMetaData {
  isPrivate: Boolean,
  author: UserInfo
}

type Idea {
  data: IdeaData,
  meta: IdeaMetaData,
  comments: Map<String, Comment>
}

isNew(ref) { prior(ref) == null }

isCurrentUser(userid) { (auth != null) && (auth.uid == userid) }

isAccountVerified(userId) { root.child('meta').child('users').child(userId).child('verified').val() == true }

path /meta/users {
  read() { false }
  write() { false }

  /{id} is UserMetaInfo {

  }
}

path /code_verifier {
  read() { false }

  /{id} is CodeVerifier {
    write() { isCurrentUser($id) }
  }
}

path /users {
  read() { true }

  /{id} is UserInfo {
     write() { isCurrentUser($id) }
  }
}

path /ideas {
  read() { (auth != null) && isAccountVerified(auth.uid) }

  /{$id} is Idea {

    write() { isNew(this) && (auth != null) && isAccountVerified(auth.uid) }

    /data is IdeaData {
      write() { isCurrentUser(this.parent().meta.author.uid) }
    }

    /meta is IdeaMetaData {
      write() { isCurrentUser(this.author.uid) }
    }

    /comments is Map<String, Comment> {
      write() { auth != null }
    }
  }
}
